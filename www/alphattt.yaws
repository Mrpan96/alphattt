<erl module=alphattt_mod>
-include("session.hrl").
-compile(export_all).

out(A) ->
    yaws_rpc:handler_session(A, {?MODULE, handle}).

handle(_State, {call, get_state, _Arg}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
	Response = web_agent:get_state(Pid), 
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};

handle(_State, {call, set_move, {array, [R, C, R1, C1]}}, #session{pid_str = PidStr}) ->	
	Move = {R, C, R1, C1},
	io:format("Webplayer Move ~p~n", [Move]),
    Pid = web_agent_mgr:get_agent_pid(PidStr),   
	ok = web_agent:set_move(Pid, Move),	
    Response = json2:obj_from_list([{"value", true},
                                {"reason", ""}]),    
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};

handle(_State, {call, start_robot, _Value}, #session{pid_str = PidStr}) ->
    Pid = web_agent_mgr:get_agent_pid(PidStr),
	ok = web_agent:start_robot(Pid, "mcts", mcts),
    Response = json2:obj_from_list([{"value", true},
                                {"reason", ""}]),     
    {true, 0, #session{pid_str = pid_to_list(Pid)}, {response, Response}};

handle(_State, {call, Func, _Args}, Session = #session{pid_str = PidStr}) ->
    io:format("alphattt unknown func call ~p, web_agent ~p~n", [Func, PidStr]),
    Response = json2:obj_from_list([{"value", true},
                                {"reason", ""}]),     
    {true, 0, Session, {response, Response}}.  
	
</erl>
